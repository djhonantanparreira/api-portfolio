{
    "openapi": "3.0.0",
    "info": {
        "title": "My Portfólio API Documentation",
        "description": "In this documentation you will be able to consult the API end-points and also test all available routes.",
        "contact": {
            "email": "djhonantanparreira@gmail.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:3000",
            "description": "Local"
        }
    ],
    "paths": {
        "/api/users/register": {
            "post": {
                "summary": "Create a new user",
                "description": "Route responsible for creating a new user",
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            },
                            "examples": {
                                "Users": {
                                    "value": {
                                        "name": "Ursa Alemã",
                                        "email": "ursa@gmail.com",
                                        "password": "12345"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Error creating user"
                    },
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schemma": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "summary": "Search all users",
                "description": "Route responsible for fetching all users",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "400": {
                        "description": "No users found"
                    },
                    "200": {
                        "description": "Users found successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "summary": "Search user by id",
                "description": "Route responsible for searching for user by id",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "string",
                        "description": "User ID",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "patch": {
                "summary": "Update user by id",
                "description": "Route responsible for editing the user by id",
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "string",
                        "description": "User ID",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            },
                            "examples": {
                                "Users": {
                                    "value": {
                                        "name": "Djhonantan Parreira",
                                        "email": "dev@djhonantan.com",
                                        "password": "12345"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Please fill all fields"
                    },
                    "200": {
                        "description": "User updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "summary": "Login to my portfólio website",
                "description": "Route responsible for logging in a registered user",
                "tags": [
                    "Auth"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            },
                            "examples": {
                                "User": {
                                    "value": {
                                        "email": "dev@djhonantan.com",
                                        "password": "12345"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid email or password"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects": {
            "post": {
                "summary": "Create a new project",
                "description": "Route responsible for creating a new Project",
                "tags": [
                    "Project"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Project"
                            },
                            "examples": {
                                "Project": {
                                    "value": {
                                        "title": "",
                                        "description": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                                        "technologies": [
                                            "NodeJS",
                                            "ReactJS",
                                            "React Native"
                                        ],
                                        "link": "localhost:3000",
                                        "image": "https://imgur.com/Ry1cb5M",
                                        "createdAt": "2021-08-01T00:00:00.000Z",
                                        "user": "611f4b3b5as34df25",
                                        "likes": [],
                                        "comments": []
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Please fill all fields"
                    },
                    "500": {
                        "description": "Error creating project"
                    },
                    "201": {
                        "description": "Project created successfully",
                        "content": {
                            "application/json": {
                                "schemma": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Search all projects",
                "description": "Route responsible for fetching all projects",
                "tags": [
                    "Project"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Projects not found"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Project"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/projects/{id}": {
            "get": {
                "summary": "Search project by id",
                "description": "Route responsible for searching for project by id",
                "tags": [
                    "Project"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "string",
                        "description": "Project ID",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update project by id",
                "description": "Route responsible for editing the project by id",
                "tags": [
                    "Project"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "string",
                        "description": "Project ID",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Project"
                            },
                            "examples": {
                                "Project": {
                                    "value": {
                                        "title": "My new project",
                                        "description": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                                        "technologies": [
                                            "NodeJS",
                                            "ReactJS",
                                            "React Native"
                                        ],
                                        "link": "localhost:3000",
                                        "image": "https://imgur.com/Ry1cb5M",
                                        "createdAt": "2021-08-01T00:00:00.000Z",
                                        "user": "611f4b3b5as34df25",
                                        "likes": [],
                                        "comments": []
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Submit at least one field to update"
                    },
                    "403": {
                        "description": "You are not allowed to update this project"
                    },
                    "200": {
                        "description": "Project updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete project by id",
                "description": "Route responsible for deleting the project by id",
                "tags": [
                    "Project"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "string",
                        "description": "Project ID",
                        "required": true
                    }
                ],
                "responses": {
                    "403": {
                        "description": "You are not allowed to delete this project"
                    },
                    "200": {
                        "description": "Project deleted"
                    }
                }
            }
        },
        "/api/projects/like/{id}": {
            "patch": {
                "summary": "Like a project or undo like",
                "description": "Route responsible for liking a project or undoing the like",
                "tags": [
                    "Project"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "string",
                        "description": "Project ID",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project liked"
                    },
                    "200": {
                        "description": "Project unliked"
                    }
                }
            },
            "/projects/comment/{id}": {
                "patch": {
                    "summary": "Comment on a project",
                    "description": "Route responsible for commenting on a project",
                    "tags": [
                        "Project"
                    ],
                    "security": [
                        {
                            "bearerAuth": []
                        }
                    ],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "type": "string",
                            "description": "Project ID",
                            "required": true
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                },
                                "examples": {
                                    "Comment": {
                                        "value": {
                                            "message": "This project is amazing!"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "responses": {
                        "400": {
                            "description": "Write a message to comment!"
                        },
                        "200": {
                            "description": "Comment added!"
                        }
                    }
                }
            },
            "/projects/{idProject}/{idComment}": {
                "patch": {
                    "summary": "Delete comment on a project",
                    "description": "Route responsible for deleting a comment on a project",
                    "tags": [
                        "Project"
                    ],
                    "security": [
                        {
                            "bearerAuth": []
                        }
                    ],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "idProject",
                            "type": "string",
                            "description": "Project ID",
                            "required": true
                        },
                        {
                            "in": "path",
                            "name": "idComment",
                            "type": "string",
                            "description": "Comment ID",
                            "required": true
                        }
                    ],
                    "responses": {
                        "403": {
                            "description": "You are not allowed to delete this comment"
                        },
                        "200": {
                            "description": "Comment deleted"
                        }
                    }
                }
            }
        },
        "components": {
            "securitySchemes": {
                "bearerAuth": {
                    "type": "http",
                    "scheme": "bearer",
                    "bearerFormat": "JWT"
                }
            },
            "schemas": {
                "User": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "email": {
                            "type": "string"
                        },
                        "password": {
                            "type": "string"
                        }
                    }
                },
                "Project": {
                    "type": "object",
                    "properties": {
                        "title": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "technologies": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "link": {
                            "type": "string"
                        },
                        "image": {
                            "type": "string"
                        },
                        "createdAt": {
                            "type": "string"
                        },
                        "user": {
                            "type": "string"
                        },
                        "likes": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "comments": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    }
                },
                "Comment": {
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}